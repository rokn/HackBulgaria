#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LibraryManagement
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HackLibrary")]
	public partial class HackLibraryDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAuthor(Author instance);
    partial void UpdateAuthor(Author instance);
    partial void DeleteAuthor(Author instance);
    partial void InsertAuthorBook(AuthorBook instance);
    partial void UpdateAuthorBook(AuthorBook instance);
    partial void DeleteAuthorBook(AuthorBook instance);
    partial void InsertBook(Book instance);
    partial void UpdateBook(Book instance);
    partial void DeleteBook(Book instance);
    partial void InsertBookGenre(BookGenre instance);
    partial void UpdateBookGenre(BookGenre instance);
    partial void DeleteBookGenre(BookGenre instance);
    partial void InsertBookLeaningHistory(BookLeaningHistory instance);
    partial void UpdateBookLeaningHistory(BookLeaningHistory instance);
    partial void DeleteBookLeaningHistory(BookLeaningHistory instance);
    partial void InsertGenre(Genre instance);
    partial void UpdateGenre(Genre instance);
    partial void DeleteGenre(Genre instance);
    partial void InsertHardCopy(HardCopy instance);
    partial void UpdateHardCopy(HardCopy instance);
    partial void DeleteHardCopy(HardCopy instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public HackLibraryDataContext() : 
				base(global::LibraryManagement.Properties.Settings.Default.HackLibraryConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HackLibraryDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HackLibraryDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HackLibraryDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HackLibraryDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Author> Authors
		{
			get
			{
				return this.GetTable<Author>();
			}
		}
		
		public System.Data.Linq.Table<AuthorBook> AuthorBooks
		{
			get
			{
				return this.GetTable<AuthorBook>();
			}
		}
		
		public System.Data.Linq.Table<Book> Books
		{
			get
			{
				return this.GetTable<Book>();
			}
		}
		
		public System.Data.Linq.Table<BookGenre> BookGenres
		{
			get
			{
				return this.GetTable<BookGenre>();
			}
		}
		
		public System.Data.Linq.Table<BookLeaningHistory> BookLeaningHistories
		{
			get
			{
				return this.GetTable<BookLeaningHistory>();
			}
		}
		
		public System.Data.Linq.Table<Genre> Genres
		{
			get
			{
				return this.GetTable<Genre>();
			}
		}
		
		public System.Data.Linq.Table<HardCopy> HardCopies
		{
			get
			{
				return this.GetTable<HardCopy>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Author")]
	public partial class Author : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<short> _YearBorn;
		
		private System.Nullable<short> _YearDied;
		
		private EntitySet<AuthorBook> _AuthorBooks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnYearBornChanging(System.Nullable<short> value);
    partial void OnYearBornChanged();
    partial void OnYearDiedChanging(System.Nullable<short> value);
    partial void OnYearDiedChanged();
    #endregion
		
		public Author()
		{
			this._AuthorBooks = new EntitySet<AuthorBook>(new Action<AuthorBook>(this.attach_AuthorBooks), new Action<AuthorBook>(this.detach_AuthorBooks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearBorn", DbType="SmallInt")]
		public System.Nullable<short> YearBorn
		{
			get
			{
				return this._YearBorn;
			}
			set
			{
				if ((this._YearBorn != value))
				{
					this.OnYearBornChanging(value);
					this.SendPropertyChanging();
					this._YearBorn = value;
					this.SendPropertyChanged("YearBorn");
					this.OnYearBornChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearDied", DbType="SmallInt")]
		public System.Nullable<short> YearDied
		{
			get
			{
				return this._YearDied;
			}
			set
			{
				if ((this._YearDied != value))
				{
					this.OnYearDiedChanging(value);
					this.SendPropertyChanging();
					this._YearDied = value;
					this.SendPropertyChanged("YearDied");
					this.OnYearDiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Author_AuthorBook", Storage="_AuthorBooks", ThisKey="Id", OtherKey="AuthorId")]
		public EntitySet<AuthorBook> AuthorBooks
		{
			get
			{
				return this._AuthorBooks;
			}
			set
			{
				this._AuthorBooks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AuthorBooks(AuthorBook entity)
		{
			this.SendPropertyChanging();
			entity.Author = this;
		}
		
		private void detach_AuthorBooks(AuthorBook entity)
		{
			this.SendPropertyChanging();
			entity.Author = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AuthorBook")]
	public partial class AuthorBook : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _BookISBN;
		
		private int _AuthorId;
		
		private EntityRef<Author> _Author;
		
		private EntityRef<Book> _Book;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookISBNChanging(long value);
    partial void OnBookISBNChanged();
    partial void OnAuthorIdChanging(int value);
    partial void OnAuthorIdChanged();
    #endregion
		
		public AuthorBook()
		{
			this._Author = default(EntityRef<Author>);
			this._Book = default(EntityRef<Book>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookISBN", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long BookISBN
		{
			get
			{
				return this._BookISBN;
			}
			set
			{
				if ((this._BookISBN != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookISBNChanging(value);
					this.SendPropertyChanging();
					this._BookISBN = value;
					this.SendPropertyChanged("BookISBN");
					this.OnBookISBNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AuthorId
		{
			get
			{
				return this._AuthorId;
			}
			set
			{
				if ((this._AuthorId != value))
				{
					if (this._Author.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorId = value;
					this.SendPropertyChanged("AuthorId");
					this.OnAuthorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Author_AuthorBook", Storage="_Author", ThisKey="AuthorId", OtherKey="Id", IsForeignKey=true)]
		public Author Author
		{
			get
			{
				return this._Author.Entity;
			}
			set
			{
				Author previousValue = this._Author.Entity;
				if (((previousValue != value) 
							|| (this._Author.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Author.Entity = null;
						previousValue.AuthorBooks.Remove(this);
					}
					this._Author.Entity = value;
					if ((value != null))
					{
						value.AuthorBooks.Add(this);
						this._AuthorId = value.Id;
					}
					else
					{
						this._AuthorId = default(int);
					}
					this.SendPropertyChanged("Author");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_AuthorBook", Storage="_Book", ThisKey="BookISBN", OtherKey="ISBN", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.AuthorBooks.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.AuthorBooks.Add(this);
						this._BookISBN = value.ISBN;
					}
					else
					{
						this._BookISBN = default(long);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Book")]
	public partial class Book : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ISBN;
		
		private string _Title;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _DatePublished;
		
		private string _Publisher;
		
		private System.Nullable<int> _Pages;
		
		private EntitySet<AuthorBook> _AuthorBooks;
		
		private EntitySet<BookGenre> _BookGenres;
		
		private EntitySet<HardCopy> _HardCopies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnISBNChanging(long value);
    partial void OnISBNChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDatePublishedChanging(System.Nullable<System.DateTime> value);
    partial void OnDatePublishedChanged();
    partial void OnPublisherChanging(string value);
    partial void OnPublisherChanged();
    partial void OnPagesChanging(System.Nullable<int> value);
    partial void OnPagesChanged();
    #endregion
		
		public Book()
		{
			this._AuthorBooks = new EntitySet<AuthorBook>(new Action<AuthorBook>(this.attach_AuthorBooks), new Action<AuthorBook>(this.detach_AuthorBooks));
			this._BookGenres = new EntitySet<BookGenre>(new Action<BookGenre>(this.attach_BookGenres), new Action<BookGenre>(this.detach_BookGenres));
			this._HardCopies = new EntitySet<HardCopy>(new Action<HardCopy>(this.attach_HardCopies), new Action<HardCopy>(this.detach_HardCopies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISBN", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ISBN
		{
			get
			{
				return this._ISBN;
			}
			set
			{
				if ((this._ISBN != value))
				{
					this.OnISBNChanging(value);
					this.SendPropertyChanging();
					this._ISBN = value;
					this.SendPropertyChanged("ISBN");
					this.OnISBNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatePublished", DbType="Date")]
		public System.Nullable<System.DateTime> DatePublished
		{
			get
			{
				return this._DatePublished;
			}
			set
			{
				if ((this._DatePublished != value))
				{
					this.OnDatePublishedChanging(value);
					this.SendPropertyChanging();
					this._DatePublished = value;
					this.SendPropertyChanged("DatePublished");
					this.OnDatePublishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Publisher", DbType="NVarChar(50)")]
		public string Publisher
		{
			get
			{
				return this._Publisher;
			}
			set
			{
				if ((this._Publisher != value))
				{
					this.OnPublisherChanging(value);
					this.SendPropertyChanging();
					this._Publisher = value;
					this.SendPropertyChanged("Publisher");
					this.OnPublisherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pages", DbType="Int")]
		public System.Nullable<int> Pages
		{
			get
			{
				return this._Pages;
			}
			set
			{
				if ((this._Pages != value))
				{
					this.OnPagesChanging(value);
					this.SendPropertyChanging();
					this._Pages = value;
					this.SendPropertyChanged("Pages");
					this.OnPagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_AuthorBook", Storage="_AuthorBooks", ThisKey="ISBN", OtherKey="BookISBN")]
		public EntitySet<AuthorBook> AuthorBooks
		{
			get
			{
				return this._AuthorBooks;
			}
			set
			{
				this._AuthorBooks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_BookGenre", Storage="_BookGenres", ThisKey="ISBN", OtherKey="BookISBN")]
		public EntitySet<BookGenre> BookGenres
		{
			get
			{
				return this._BookGenres;
			}
			set
			{
				this._BookGenres.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_HardCopy", Storage="_HardCopies", ThisKey="ISBN", OtherKey="BookISBN")]
		public EntitySet<HardCopy> HardCopies
		{
			get
			{
				return this._HardCopies;
			}
			set
			{
				this._HardCopies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AuthorBooks(AuthorBook entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_AuthorBooks(AuthorBook entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
		
		private void attach_BookGenres(BookGenre entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_BookGenres(BookGenre entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
		
		private void attach_HardCopies(HardCopy entity)
		{
			this.SendPropertyChanging();
			entity.Book = this;
		}
		
		private void detach_HardCopies(HardCopy entity)
		{
			this.SendPropertyChanging();
			entity.Book = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookGenre")]
	public partial class BookGenre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _BookISBN;
		
		private int _GenreId;
		
		private EntityRef<Book> _Book;
		
		private EntityRef<Genre> _Genre;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookISBNChanging(long value);
    partial void OnBookISBNChanged();
    partial void OnGenreIdChanging(int value);
    partial void OnGenreIdChanged();
    #endregion
		
		public BookGenre()
		{
			this._Book = default(EntityRef<Book>);
			this._Genre = default(EntityRef<Genre>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookISBN", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long BookISBN
		{
			get
			{
				return this._BookISBN;
			}
			set
			{
				if ((this._BookISBN != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookISBNChanging(value);
					this.SendPropertyChanging();
					this._BookISBN = value;
					this.SendPropertyChanged("BookISBN");
					this.OnBookISBNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GenreId
		{
			get
			{
				return this._GenreId;
			}
			set
			{
				if ((this._GenreId != value))
				{
					if (this._Genre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenreIdChanging(value);
					this.SendPropertyChanging();
					this._GenreId = value;
					this.SendPropertyChanged("GenreId");
					this.OnGenreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_BookGenre", Storage="_Book", ThisKey="BookISBN", OtherKey="ISBN", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.BookGenres.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.BookGenres.Add(this);
						this._BookISBN = value.ISBN;
					}
					else
					{
						this._BookISBN = default(long);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_BookGenre", Storage="_Genre", ThisKey="GenreId", OtherKey="Id", IsForeignKey=true)]
		public Genre Genre
		{
			get
			{
				return this._Genre.Entity;
			}
			set
			{
				Genre previousValue = this._Genre.Entity;
				if (((previousValue != value) 
							|| (this._Genre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Genre.Entity = null;
						previousValue.BookGenres.Remove(this);
					}
					this._Genre.Entity = value;
					if ((value != null))
					{
						value.BookGenres.Add(this);
						this._GenreId = value.Id;
					}
					else
					{
						this._GenreId = default(int);
					}
					this.SendPropertyChanged("Genre");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookLeaningHistory")]
	public partial class BookLeaningHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HardCopyId;
		
		private int _UserLeantTo;
		
		private System.DateTime _LeantDate;
		
		private System.DateTime _ReturnedDate;
		
		private EntityRef<HardCopy> _HardCopy;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHardCopyIdChanging(int value);
    partial void OnHardCopyIdChanged();
    partial void OnUserLeantToChanging(int value);
    partial void OnUserLeantToChanged();
    partial void OnLeantDateChanging(System.DateTime value);
    partial void OnLeantDateChanged();
    partial void OnReturnedDateChanging(System.DateTime value);
    partial void OnReturnedDateChanged();
    #endregion
		
		public BookLeaningHistory()
		{
			this._HardCopy = default(EntityRef<HardCopy>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HardCopyId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int HardCopyId
		{
			get
			{
				return this._HardCopyId;
			}
			set
			{
				if ((this._HardCopyId != value))
				{
					if (this._HardCopy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHardCopyIdChanging(value);
					this.SendPropertyChanging();
					this._HardCopyId = value;
					this.SendPropertyChanged("HardCopyId");
					this.OnHardCopyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLeantTo", DbType="Int NOT NULL")]
		public int UserLeantTo
		{
			get
			{
				return this._UserLeantTo;
			}
			set
			{
				if ((this._UserLeantTo != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserLeantToChanging(value);
					this.SendPropertyChanging();
					this._UserLeantTo = value;
					this.SendPropertyChanged("UserLeantTo");
					this.OnUserLeantToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeantDate", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime LeantDate
		{
			get
			{
				return this._LeantDate;
			}
			set
			{
				if ((this._LeantDate != value))
				{
					this.OnLeantDateChanging(value);
					this.SendPropertyChanging();
					this._LeantDate = value;
					this.SendPropertyChanged("LeantDate");
					this.OnLeantDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnedDate", DbType="Date NOT NULL")]
		public System.DateTime ReturnedDate
		{
			get
			{
				return this._ReturnedDate;
			}
			set
			{
				if ((this._ReturnedDate != value))
				{
					this.OnReturnedDateChanging(value);
					this.SendPropertyChanging();
					this._ReturnedDate = value;
					this.SendPropertyChanged("ReturnedDate");
					this.OnReturnedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HardCopy_BookLeaningHistory", Storage="_HardCopy", ThisKey="HardCopyId", OtherKey="Id", IsForeignKey=true)]
		public HardCopy HardCopy
		{
			get
			{
				return this._HardCopy.Entity;
			}
			set
			{
				HardCopy previousValue = this._HardCopy.Entity;
				if (((previousValue != value) 
							|| (this._HardCopy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HardCopy.Entity = null;
						previousValue.BookLeaningHistories.Remove(this);
					}
					this._HardCopy.Entity = value;
					if ((value != null))
					{
						value.BookLeaningHistories.Add(this);
						this._HardCopyId = value.Id;
					}
					else
					{
						this._HardCopyId = default(int);
					}
					this.SendPropertyChanged("HardCopy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BookLeaningHistory", Storage="_User", ThisKey="UserLeantTo", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.BookLeaningHistories.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.BookLeaningHistories.Add(this);
						this._UserLeantTo = value.Id;
					}
					else
					{
						this._UserLeantTo = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Genre")]
	public partial class Genre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<BookGenre> _BookGenres;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Genre()
		{
			this._BookGenres = new EntitySet<BookGenre>(new Action<BookGenre>(this.attach_BookGenres), new Action<BookGenre>(this.detach_BookGenres));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_BookGenre", Storage="_BookGenres", ThisKey="Id", OtherKey="GenreId")]
		public EntitySet<BookGenre> BookGenres
		{
			get
			{
				return this._BookGenres;
			}
			set
			{
				this._BookGenres.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookGenres(BookGenre entity)
		{
			this.SendPropertyChanging();
			entity.Genre = this;
		}
		
		private void detach_BookGenres(BookGenre entity)
		{
			this.SendPropertyChanging();
			entity.Genre = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HardCopy")]
	public partial class HardCopy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private long _BookISBN;
		
		private System.Nullable<int> _UserLeantTo;
		
		private System.Nullable<System.DateTime> _LeantDate;
		
		private System.Nullable<System.DateTime> _ExpectedReturnDate;
		
		private EntitySet<BookLeaningHistory> _BookLeaningHistories;
		
		private EntityRef<Book> _Book;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBookISBNChanging(long value);
    partial void OnBookISBNChanged();
    partial void OnUserLeantToChanging(System.Nullable<int> value);
    partial void OnUserLeantToChanged();
    partial void OnLeantDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLeantDateChanged();
    partial void OnExpectedReturnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpectedReturnDateChanged();
    #endregion
		
		public HardCopy()
		{
			this._BookLeaningHistories = new EntitySet<BookLeaningHistory>(new Action<BookLeaningHistory>(this.attach_BookLeaningHistories), new Action<BookLeaningHistory>(this.detach_BookLeaningHistories));
			this._Book = default(EntityRef<Book>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookISBN", DbType="BigInt NOT NULL")]
		public long BookISBN
		{
			get
			{
				return this._BookISBN;
			}
			set
			{
				if ((this._BookISBN != value))
				{
					if (this._Book.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookISBNChanging(value);
					this.SendPropertyChanging();
					this._BookISBN = value;
					this.SendPropertyChanged("BookISBN");
					this.OnBookISBNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLeantTo", DbType="Int")]
		public System.Nullable<int> UserLeantTo
		{
			get
			{
				return this._UserLeantTo;
			}
			set
			{
				if ((this._UserLeantTo != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserLeantToChanging(value);
					this.SendPropertyChanging();
					this._UserLeantTo = value;
					this.SendPropertyChanged("UserLeantTo");
					this.OnUserLeantToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeantDate", DbType="Date")]
		public System.Nullable<System.DateTime> LeantDate
		{
			get
			{
				return this._LeantDate;
			}
			set
			{
				if ((this._LeantDate != value))
				{
					this.OnLeantDateChanging(value);
					this.SendPropertyChanging();
					this._LeantDate = value;
					this.SendPropertyChanged("LeantDate");
					this.OnLeantDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpectedReturnDate", DbType="Date")]
		public System.Nullable<System.DateTime> ExpectedReturnDate
		{
			get
			{
				return this._ExpectedReturnDate;
			}
			set
			{
				if ((this._ExpectedReturnDate != value))
				{
					this.OnExpectedReturnDateChanging(value);
					this.SendPropertyChanging();
					this._ExpectedReturnDate = value;
					this.SendPropertyChanged("ExpectedReturnDate");
					this.OnExpectedReturnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HardCopy_BookLeaningHistory", Storage="_BookLeaningHistories", ThisKey="Id", OtherKey="HardCopyId")]
		public EntitySet<BookLeaningHistory> BookLeaningHistories
		{
			get
			{
				return this._BookLeaningHistories;
			}
			set
			{
				this._BookLeaningHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Book_HardCopy", Storage="_Book", ThisKey="BookISBN", OtherKey="ISBN", IsForeignKey=true)]
		public Book Book
		{
			get
			{
				return this._Book.Entity;
			}
			set
			{
				Book previousValue = this._Book.Entity;
				if (((previousValue != value) 
							|| (this._Book.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Book.Entity = null;
						previousValue.HardCopies.Remove(this);
					}
					this._Book.Entity = value;
					if ((value != null))
					{
						value.HardCopies.Add(this);
						this._BookISBN = value.ISBN;
					}
					else
					{
						this._BookISBN = default(long);
					}
					this.SendPropertyChanged("Book");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_HardCopy", Storage="_User", ThisKey="UserLeantTo", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.HardCopies.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.HardCopies.Add(this);
						this._UserLeantTo = value.Id;
					}
					else
					{
						this._UserLeantTo = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookLeaningHistories(BookLeaningHistory entity)
		{
			this.SendPropertyChanging();
			entity.HardCopy = this;
		}
		
		private void detach_BookLeaningHistories(BookLeaningHistory entity)
		{
			this.SendPropertyChanging();
			entity.HardCopy = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Pseudonim;
		
		private string _Email;
		
		private string _Phone;
		
		private EntitySet<BookLeaningHistory> _BookLeaningHistories;
		
		private EntitySet<HardCopy> _HardCopies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPseudonimChanging(string value);
    partial void OnPseudonimChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    #endregion
		
		public User()
		{
			this._BookLeaningHistories = new EntitySet<BookLeaningHistory>(new Action<BookLeaningHistory>(this.attach_BookLeaningHistories), new Action<BookLeaningHistory>(this.detach_BookLeaningHistories));
			this._HardCopies = new EntitySet<HardCopy>(new Action<HardCopy>(this.attach_HardCopies), new Action<HardCopy>(this.detach_HardCopies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pseudonim", DbType="NVarChar(50)")]
		public string Pseudonim
		{
			get
			{
				return this._Pseudonim;
			}
			set
			{
				if ((this._Pseudonim != value))
				{
					this.OnPseudonimChanging(value);
					this.SendPropertyChanging();
					this._Pseudonim = value;
					this.SendPropertyChanged("Pseudonim");
					this.OnPseudonimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_BookLeaningHistory", Storage="_BookLeaningHistories", ThisKey="Id", OtherKey="UserLeantTo")]
		public EntitySet<BookLeaningHistory> BookLeaningHistories
		{
			get
			{
				return this._BookLeaningHistories;
			}
			set
			{
				this._BookLeaningHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_HardCopy", Storage="_HardCopies", ThisKey="Id", OtherKey="UserLeantTo")]
		public EntitySet<HardCopy> HardCopies
		{
			get
			{
				return this._HardCopies;
			}
			set
			{
				this._HardCopies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookLeaningHistories(BookLeaningHistory entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_BookLeaningHistories(BookLeaningHistory entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_HardCopies(HardCopy entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_HardCopies(HardCopy entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
